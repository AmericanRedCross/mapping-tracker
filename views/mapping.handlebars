
<link rel="stylesheet" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.css" />
<style>
#map{
  height: 450px;
}
svg {
  position: relative;
}
.info hr {
  margin: 2px 0;
}
#info-subm, .info .info-selected {
  display: none;
}
.info-note {
  font-size: 85%;
  color: #777;
  font-style: italic;
  margin-top: 3px;
}


.leaflet-control-attribution a {
  color: #6d6e70 !important;
  cursor: pointer;
}
.clickable{
  cursor: pointer;
}
.leaflet-control-attribution {
  font-size: x-small;
  color: #78787d;
}
.leaflet-control-attribution a {
  text-decoration: none;
  cursor: pointer;
  color: #6d6e70;
}

.day.hover {
  stroke: #6d6E70;
  stroke-width: 2;
}
.day.focus {
  stroke: #ffff33;
  stroke-width: 2;
}

.hexbin {
  stroke-linecap: round;
  stroke-linejoin: round;
}
.subm {
  r: 3;
  fill: #081d58;
  fill-opacity: 0.8;
  cursor: pointer;
}
.subm.focus {
  r: 5;
  fill: #ecb731;
  stroke: #000;
  stroke-width: 1;
}
</style>

<div class="container">
<header class="row header">
	<div class="col-md-12">
		<h1>Mapping dashboard</h1>
	</div>
</header>
<hr>
</div>



<div class="container-fluid">
	<div class="col-xs-9">
		<div id="map"></div>
	</div>
  <div class="col-xs-3 info" style="padding:0;">
		<div id="info-1">
      <div class="info-head"></div>
      <div>Total submissions: <b><span id="total-submissions"></span></b></div>
    </div>
    <hr>
    <div id="info-hex">
      <div class="info-head info-note">select a hex</div>
      <span class="info-selected">
        <div>Submissions in hex: <b><span id="hex-submissions"></span></b></div>
        <div class="info-note clickable" onclick="clearInfo('hex');"><i class="fa fa-times"></i> clear selected hex</div>
      </span>
    </div>
    <hr>
    <div id="info-subm">
      <div class="info-head info-note">select a submission</div>
      <span class="info-selected">
        <div>type: <span id="subm-type"></span></div>
        <div id="subm-tags"></div>
        <div class="info-note clickable" onclick="clearInfo('submission');"><i class="fa fa-times"></i> clear selected submission</div>
      </span>
    </div>
	</div>
</div>

<div class="container">

<hr>

<div id="calendar" style="width: 160px;"> </div>

<hr>

</div>

<div style="height:200px;"></div>


<script src="js/colorbrewer.min.js"></script>
<script src="//api.tiles.mapbox.com/mapbox.js/plugins/turf/v2.0.0/turf.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.3/leaflet.js"></script>
<script>



var map = L.map('map').setView([0, 0], 2);
var mapFeatures = L.layerGroup().addTo(map);
var pointLayer = L.geoJson();
var mapBounds;

var formatCommas = d3.format(",");


L.tileLayer('http://{s}.tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png', {
  attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

// ADD CONTROL FOR ZOOM TO EXTENT
var extentControl = L.Control.extend({
  options: {
    position: 'topleft',
		title: 'Full extent',
    content: '<i class="fa fa-expand"></i>'
  },
  onAdd: function (map) {
    var className = 'leaflet-control-zoom-extent', content, container;
    container = map.zoomControl._container;
    content = this.options.content;
    this._createButton(this.options.title, className, content, container, this);
    return container;
  },
  _createButton: function (title, className, content, container, context) {
    this.link = L.DomUtil.create('a', className, container);
    this.link.href = '#';
    this.link.title = title;
    this.link.innerHTML = content;
    return this.link;
  }
});
map.addControl(new extentControl());

$('.leaflet-control-zoom-extent').click(function(){
  map.fitBounds(mapBounds);
})



var calendarData = [];

function getCalendarData(){
  url = window.location.origin + "/query/submissions-date-count";
  $.get(url, function(response){
    $.each(response, function(i, day){
      day.today = day.today.slice(0,10);
    });
    calendarData = response;
    drawCalendar()
  });
}

function drawCalendar(){

  var calendarRows = function(month){
    //expects the month floor e.g. `Tue Mar 01 2016 00:00:00 GMT-0500 (EST)`
    return d3.time.weeks(d3.time.week.floor(month), d3.time.month.offset(month,1)).length
  }

  var minDate = d3.min(calendarData, function(d) { return new Date(d.today) })
  // var maxDate = new Date("2016-03-28")
  var maxDate = d3.max(calendarData, function(d) { return new Date(d.today) })


 var cellMargin = 2,
     cellSize = 20;

 var day = d3.time.format("%w"),
     week = d3.time.format("%U"),
     percent = d3.format(".1%"),
     format = d3.time.format("%Y-%m-%d"),
     titleFormat = d3.time.format.utc("%d %b");
     monthName = d3.time.format("%B"),
     months= d3.time.month.range(d3.time.month.floor(minDate), maxDate);

 var svg = d3.select("#calendar").selectAll("svg")
     .data(months)
     .enter().append("svg")
       .attr("width", (cellSize * 7) + (cellMargin * 8))
       .attr("height", function(d) {
         console.log(calendarRows(d))
          var rows = calendarRows(d);
          return (cellSize * rows) + (cellMargin * (rows + 1))
        })
       .attr("class", "RdYlGn")
     .append("g")

 var rect = svg.selectAll("rect.day")
     .data(function(d, i) { return d3.time.days(d, new Date(d.getFullYear(), d.getMonth()+1, 1)); })
     .enter().append("rect")
       .attr("class", "day")
       .attr("width", cellSize)
       .attr("height", cellSize)
       .attr("rx", 3)
       .attr("ry", 3)
       .attr("fill", '#eaeaea')
       .attr("x", function(d) { return (day(d) * cellSize) + (day(d) * cellMargin) + cellMargin; })
       .attr("y", function(d) { return ((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellSize) + ((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellMargin) + cellMargin ; })
       .on("mouseover", function(d) {
         d3.select(this).classed('hover', true);
       })
       .on("mouseout", function(d) {
         d3.select(this).classed('hover', false);
       })
      .datum(format);

 rect.append("title")
    .text(function(d) { return titleFormat(new Date(d)); });

  var data = d3.nest()
    .key(function(d) { return d.today; })
    .rollup(function(leaves) { return d3.sum(leaves, function(d){ return parseInt(d.count); }); })
    .map(calendarData);


    var color = d3.scale.quantize()
      .domain(d3.extent(calendarData, function(d) { return parseInt(d.count) }))
      .range(["#9ecae1","#6baed6","#4292c6","#2171b5","#08519c","#08306b"]);
      // Every ColorBrewer Scale
      // http://bl.ocks.org/mbostock/raw/5577023/

  rect.filter(function(d) { return d in data; })
      .style("fill", function(d) { return color(data[d]) })
      .classed("clickable", true)
      .on("click", function(d){
        if(d3.select(this).classed('focus')){
          d3.select(this).classed('focus', false)
        } else { d3.select(this).classed('focus', true)  }
        filterMap();
      })
    .select("title")
      .text(function(d) { return titleFormat(new Date(d)) + ": " + data[d]; });

}

getCalendarData();


function filterMap(){
  var dates = [];
  d3.selectAll("rect.day.focus").each(function(d){
    dates.push(d)
  })

  $.ajax({
    type: 'POST',
    data: {'dateFilter': dates},
    url: '/query/hex',
    dataType: 'JSON'
  }).done(function(response){
    clearInfo('hex')
    mapHex(response)
  });

}


function getFullHexData(){
  $.ajax({
    type: 'POST',
    data: {'dateFilter': undefined},
    url: '/query/hex',
    dataType: 'JSON'
  }).done(function(response){

    var bbox = turf.extent(response);
    mapBounds = [[bbox[1],bbox[0]],[bbox[3],bbox[2]]]
    map.fitBounds(mapBounds)

    mapHex(response)
  });
}


// initialize the SVG layer for D3 drawn survey points
map._initPathRoot()

// pick up the SVG from the map object
var svg = d3.select("#map").select("svg");
var hexGroup = svg.append("g");
  //.attr("class", "leaflet-zoom-hide hex-group");
var submissionGroup = svg.append("g")
  //.attr("class", "leaflet-zoom-hide submission-group");

function projectPoint(x, y) {
  var point = map.latLngToLayerPoint(new L.LatLng(y, x));
  this.stream.point(point.x, point.y);
}

var transform = d3.geo.transform({point: projectPoint}),
    path = d3.geo.path().projection(transform);

d3.selection.prototype.moveToFront = function() {
  return this.each(function(){
    this.parentNode.appendChild(this);
  });
};

function clickedHex(data, target){
  if(!d3.select(target).classed("focus")){
    hexGroup.selectAll("path.focus").classed("focus", false)
      .transition().duration(450).style("fill-opacity", 0.45).style("stroke-width",0);
    //hexGroup.selectAll("path").classed("focus", false);

    d3.select(target).moveToFront().classed("focus", true).transition().duration(450)
    .style("fill-opacity", 1e-6).style("stroke-width",2);
    submissionGroup.selectAll('circle').remove()

    var dates = [];
    d3.selectAll("rect.day.focus").each(function(d){
      dates.push(d)
    })
    if(dates.length === 0 ){ dates = undefined }

    $.ajax({
      type: 'POST',
      data: {'hex': data, 'dateFilter': dates},
      url: '/query/hex/contents',
      dataType: 'JSON'
    }).done(function(response){
      mapSubmissions(response)
      $("#info-hex .info-head").hide();
      $("#info-subm").show();
      $("#info-hex .info-selected").show();
      //$("#info-subm").show();
      $("#info-subm .info-head").show();
      $("#info-subm .info-selected").hide();

      $("#hex-submissions").html(formatCommas(data.properties.total));
    });
  }
}

function clickedSubmission(data, target){
  if(d3.select(target).classed("focus")){
    submissionGroup.selectAll("circle").classed("focus", false);
  } else {
    submissionGroup.selectAll("circle").classed("focus", false);
    d3.select(target).moveToFront().classed("focus", true);
    $("#info-subm .info-head").hide();
    $("#info-subm .info-selected").show();
    $("#subm-type").html(data.properties.type);
    if(data.properties.tags !== "undefined"){
      var tagHtml = '';
      var tags = JSON.parse(data.properties.tags);
      for(key in tags){
        tagHtml += key + " = " + tags[key] + "<br>";
      }
      $("#subm-tags").html(tagHtml);
    }
  }
}

function clearInfo(what){

  if(what === "hex"){
    console.log('clear for : ' + what)
    $("#info-hex .info-head").show();
    $("#info-hex .info-selected").hide();
    $("#info-subm").hide();
    $("#info-subm .info-head").show();
    hexGroup.selectAll("path.focus").classed("focus", false).style("stroke-width", 1e-6)
      .transition().duration(450).style("stroke-width", 0).style("fill-opacity", 0.45).style("stroke-width", 1e-6);
    submissionGroup.selectAll('circle').remove()

  }
  if(what === "submission"){
    $("#info-subm .info-head").show();
    $("#info-subm .info-selected").hide();
    submissionGroup.selectAll("circle").classed("focus", false);
  }

}

function mapSubmissions(fc){
  var points = submissionGroup.selectAll("circle")
    .data(fc.features).enter().append("circle")
    .classed('subm', true)
    .on('click', function(d){ clickedSubmission(d, this); })

    // [-72.9203588251, 11.523661775]
    // [11.523661775, -72.9203588251]

  // when map view changes adjust the locations of the svg circles
  function updatemarker(){
    points.attr("cx",function(d) {
      return map.latLngToLayerPoint([d.geometry.coordinates[1],d.geometry.coordinates[0]]).x
    });
    points.attr("cy",function(d) {
      return map.latLngToLayerPoint([d.geometry.coordinates[1],d.geometry.coordinates[0]]).y
    });
  }
  map.on("viewreset", updatemarker);
  updatemarker();

}

var x

function mapHex(fc){


  x = fc

  $("#total-submissions").html(formatCommas(d3.sum(fc.features, function(d) { return d.properties.total })))

  var domain = d3.extent(fc.features, function(d) { return d.properties.total })
  if(domain[0] === domain[1]){ domain[0] = 0;}
  var color = d3.scale.quantize()
    .domain(domain)
    .range(["#c994c7","#df65b0","#e7298a","#ce1256","#980043","#67001f"]);

  var feature = hexGroup.selectAll("path")
    .data(fc.features, function(d) { return d.properties.id; })

  //UPDATE
  // feature.style("fill", function(d){ return color(d.properties.total); })
  //   .style("stroke", function(d){ return color(d.properties.total); })

  //ENTER
  feature.enter().append("path")
    .classed("hexbin", true)
    .style("stroke-width", 0)
    .style("fill-opacity", 1e-6)
    .style("fill", "#fff")

  //ENTER + UPDATE
  feature.on('click', function(d){ clickedHex(d, this); })
    .transition()
    .duration(850)
    .style("fill-opacity", 0.45)
    .style("fill", function(d){
      return color(d.properties.total)
    })
    .style("stroke", function(d){
      return color(d.properties.total)
    })


  //EXIT
  feature.exit().transition()
      .duration(750).style("fill-opacity", 1e-6).remove();

  function updateHex(){
    feature.attr("d", path);
  }
  map.on("viewreset", updateHex);
  updateHex();


}

getFullHexData()

</script>
